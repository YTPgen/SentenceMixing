import re

from fire import Fire
from moviepy.editor import concatenate, VideoFileClip
import subprocess


def convert_time(timestring):
    nums = map(float, re.findall(r'\d+', timestring))
    nums = list(nums)
    return 3600*nums[0] + 60*nums[1] + nums[2] + nums[3]/1000


def assemble_cuts(video, cuts, outputfile):
    final = concatenate([video.subclip(start, end)
                                for (start, end) in cuts]) 
    final.to_videofile(outputfile)


def find_word(times_text, word, padding=0.05):
    matches = [re.search(word, text)
                    for (t, text) in times_text]
    return [(t1 + m.start()*(t2-t1)/len(text) - padding,
            t1 + m.end()*(t2-t1)/len(text) + padding)
            for m, ((t1, t2), text) in zip(matches, times_text)
            if (m is not None)]


def main():
    # load video and extract audio from it
    outp_filename = 'hotelmario'
    mixed_filename = 'pesky'
    command = f'youtube-dl --write-srt --srt-lang en jra4ZxGA-ww --o {outp_filename}'
    #TODO Different format for autogenerated subs! vtt format, needs to be handled separately
    #command = f'youtube-dl --write-auto-sub --sub-format srt 6c0vDTMKlP0 --o {outp_filename}'
    subprocess.call(command, shell=True)
    #TODO redirected output to an object rather than writing to file

    with open(outp_filename+'.en.vtt') as f:
        lines = f.readlines()
    
    times_texts = []
    current_times, current_text = None, ""
    for line in lines:
        times = re.findall("[0-9]*:[0-9]*:[0-9]*.[0-9]*", line)
        if times != []:
            current_times = list(map(convert_time, times))
        elif line == '\n':
            times_texts.append((current_times, current_text))
            current_times, current_text = None, ''
        elif current_times is not None:
            current_text = current_text + line.replace('\n',' ')

    times_texts = times_texts[1:]
    words = ['The princess', 'made', 'lots of spaghetti', 'for', 'the','Koopalings']
    cuts = [find_word(times_texts, word)[-1] for word in words]

    video = VideoFileClip(outp_filename+'.mkv')
    assemble_cuts(video, cuts, f'{mixed_filename}.mp4')
        

if __name__ == '__main__':
    main()